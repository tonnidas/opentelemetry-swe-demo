version: '3.9'

services:
  envoy:
    build:
      context: ./
      dockerfile: src/envoy/Dockerfile
    ports:
      - "${ENVOY_PORT}:${ENVOY_PORT}"
      - 10000:10000
    environment:
      - PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - CONTEST_SERVICE_HOST
      - CONTEST_SERVICE_PORT
      - TEAM_SERVICE_PORT
      - TEAM_SERVICE_HOST
      - PERSON_SERVICE_PORT
      - PERSON_SERVICE_HOST
      - GRAFANA_SERVICE_PORT
      - GRAFANA_SERVICE_HOST
      - JAEGER_SERVICE_PORT
      - JAEGER_SERVICE_HOST
      - ENVOY_PORT
      - ENVOY_UID=0
    depends_on:
      - contestservice
      - teamservice
      - personservice
      - grafana

  contestservice:
    build:
      context: ./src/contestservice
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "${CONTEST_SERVICE_PORT}"
    environment:
      - SPRING_DATASOURCE_PLATFORM=postgres
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_SERVICE_NAME=contestservice
      - TEAM_SERVICE_URL=http://${TEAM_SERVICE_HOST}:${TEAM_SERVICE_PORT}
      - PERSON_SERVICE_URL=http://${PERSON_SERVICE_HOST}:${PERSON_SERVICE_PORT}
    depends_on:
      postgres:
        condition: service_healthy

  teamservice:
    build:
      context: ./src/teamservice
    deploy:
      resources:
        limits:
          memory: 100M
    ports:
      - "${TEAM_SERVICE_PORT}"
    environment:
      - TEAM_SERVICE_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST=postgres
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_SERVICE_NAME=teamservice
    depends_on:
      postgres:
        condition: service_healthy

  personservice:
    build:
      context: ./src/personservice
    deploy:
      resources:
        limits:
          memory: 100M
    ports:
      - "${PERSON_SERVICE_PORT}"
    environment:
      - PERSON_SERVICE_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST=postgres
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_SERVICE_NAME=personservice
    depends_on:
      postgres:
        condition: service_healthy

  # Postgres
  postgres:
    image: postgres:14
    deploy:
      resources:
        limits:
          memory: 120M
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one
    command: ["--memory.max-traces", "10000", "--query.base-path", "/jaeger/ui"]
    deploy:
      resources:
        limits:
          memory: 275M
    restart: always
    ports:
      - "${JAEGER_SERVICE_PORT}:${JAEGER_SERVICE_PORT}"                    # Jaeger UI
      - "4317"                           # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Grafana
  grafana:
    image: grafana/grafana:9.1.0
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}"

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.61.0
    deploy:
      resources:
        limits:
          memory: 100M
    restart: always
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./src/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./src/otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - jaeger

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
